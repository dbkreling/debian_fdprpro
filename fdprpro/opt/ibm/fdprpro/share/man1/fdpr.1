.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FDPR 1"
.TH FDPR 1 "20-Sep-12" "5.6.1.8" "FDPR - Feedback-Directed Program Restructuring"
.SH "Name"
.IX Header "Name"
\&\s-1FDPR\s0 \- Feedback-Directed Post-link Optimization for Linux on \s-1POWER\s0
.SH "Synopsis"
.IX Header "Synopsis"
\&\fBfdpr\fR 
[\fB\-\-instrument\fR \fIfile\fR]
[\fB\-\-train\fR \fIworkload\fR [\fB\-\-reset\fR] ]
[\fB\-\-optimize\fR]
[\fB\-\-log\fR \fIfile\fR]
[\fB\-f\fR, \fB\-\-profile\-file\fR \fIfile\fR]
[\fB\-o\fR, \fB\-\-output\-file\fR \fIfile\fR]
[\fB\-V\fR, \fB\-\-version\fR] 
[\fB\-v\fR, \fB\-\-verbose\fR]
[\fB\-h\fR, \fB\-\-help\fR] 
[\fIfdprpro-options\fR]
[\-\-] \fIprogram\fR
.PP
\&\fBfdprpro\fR \fB\-a\fR \fIaction\fR [\fIfdprpro-options\fR] \fIprogram\fR
.SH "Description"
.IX Header "Description"
\&\s-1FDPR\s0 is a
performance-tuning utility for reducing the execution time
and the real-memory utilization of user-level application
programs. The tool optimizes the executable image of a program
by collecting information on the program's behavior under a typical workload 
and creating a new
version of the program optimized for that workload. The new
program generated by the post-link optimizer typically runs faster and uses less real
memory than the original program.
.PP
\&\fBNote\fR: The post-link optimizer applies advanced optimization techniques to
programs. Some aggressive optimizations may result in programs that do not behave as expected.
It is recommended to test the optimized program, at least, with the same test suite used to 
test the original program.
The optimized program is not supported as input to the optimizer.
.PP
The post-link optimizer builds an optimized executable program in three distinct phases:
.IP "* Instrumentation (\-\-instrument):" 3
.IX Item "Instrumentation (--instrument):"
Creates an instrumented executable program and an empty template profile file.
.IP "* Training (\-\-train):" 3
.IX Item "Training (--train):"
Runs the instrumented program and updates the profile data.
.IP "* One of the following two phases:" 3
.IX Item "One of the following two phases:"
.RS 3
.PD 0
.IP "* Optimization (\-\-optimize):" 4
.IX Item "Optimization (--optimize):"
.PD
Generates the optimized executable program file, given optimization options.
.RE
.RS 3
.RE
.PP
See the corresponding options for further details.
.PP
The three-phase process can be achieved by using \fBfdpr\fR or
\&\fBfdprpro\fR.
.PP
\&\fBfdpr\fR provides a convenient user interface, enabling the three
phases, or any legal combination thereof, to be performed in one command.
.PP
More experienced users may prefer to use \fBfdprpro\fR, which performs the actual
processing. \fBfdprpro\fR provides explicit control over the actual processing
and requires a separate activation to perform either the instrumentation or the
optimization phases. This is specified by the action option \fB\-a\fR|\fB\-\-action\fR \fIaction\fR,
where the \fIaction\fR term is \*(L"instr\*(R" to perform instrumentation or \*(L"opt\*(R" to perform optimization. 
.PP
\&\fBNote\fR: The instrumented executable, created in the instrumentation phase and run
in the training phase, typically runs several times slower than the
original program.  Due to the increased execution time
required by the instrumented program, the executable should be
invoked in such a way as to minimize execution duration, while
still fully exercising the required code areas. 
.SH "\fBfdpr\fP options"
.IX Header "fdpr options"
.IP "\fB\-\-instrument\fR \fI[file]\fR" 5
.IX Item "--instrument [file]"
Creates an instrumented executable program with the specified
name (default \fIprogram\fR.instr).
Default: no instrumentation phase.
.IP "\fB\-\-reset\fR" 5
.IX Item "--reset"
Normally, each time the instrumented program runs, it accumulates
profile information in the profile file (see
\&\fB\-\-profile\-file\fR). Specifying this option causes the initial option
file, saved in \fIprofile-name\fR.template, to be copied to the profile
file. This effectively resets the profile information to its empty
state. The option requires \fB\-\-train\fR to be specified as well.
.IP "\fB\-\-train\fR \fIworkload\fR" 5
.IX Item "--train workload"
Runs the instrumented program and creates the profile
data. The workload is a script that accepts one parameter: the
executing program. \fBfdpr\fR invokes the script with the path to the
instrumented program. If instrumentation phase is not
specified, the instrumented program is assumed to be
\&\fIprogram\fR.instr.
Default: No profiling phase.
.IP "\fB\-\-optimize\fR" 5
.IX Item "--optimize"
Generates the optimized executable program file. Users can specify
optimizations explicitly by passing optimization
options to \fBfdprpro\fR (see \fBfdprpro options\fR below).  If no
\&\fBfdprpro\fR optimization option is specified, the \fBfdprpro\fR \fB\-O\fR option is used.
.IP "\fB\-o\fR \fIoutput_file\fR, \fB\-\-output\fR \fIoutput_file\fR" 5
.IX Item "-o output_file, --output output_file"
The optimized output file.
The default is \fIprogram\fR.fdpr
.IP "\fB\-f\fR, \fB\-\-profile\-file\fR \fIfile\fR" 5
.IX Item "-f, --profile-file file"
The profile file. This is used as an output file in the instrumentation phase and
as an input file in the optimization phase.
The default is \fIprogram\fR.nprof
.IP "\fB\-V\fR, \fB\-\-version\fR" 5
.IX Item "-V, --version"
Prints version information and exits.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 5
.IX Item "-v, --verbose"
Prints progress indication and statistical information during processing.
.IP "\fB\-h\fR, \fB\-\-help\fR" 5
.IX Item "-h, --help"
Prints usage information and exit.
.PP
The above options can be shortened to any unique sequence.
.PP
To disambiguate option parsing, separate the options from \fIprogram\fR by '\-\-'.
For example, because the parameter to \fB\-\-instrument\fR is optional, the following command is illegal:
.PP
.Vb 1
\&  $ fdpr --instr myprog
.Ve
.PP
Instead, use the command:
.PP
.Vb 1
\&  $ fdpr --instr -- myprog
.Ve
.SH "Input files"
.IX Header "Input files"
The input file to \fBfdpr\fR should be an \s-1ELF\s0 executable or shared
library (\f(CW\*(C`.so\*(C'\fR file). Both \s-1ELF32\s0 and \s-1ELF64\s0 are supported.
.PP
\&\fBNote\fR: The executable program should be built with
relocation information. \fBfdpr\fR supports both the \s-1GCC\s0 and \s-1XLC\s0
compilers and the \s-1GNU\s0 linker. To leave the relocation
information in the executable file, use the linker with
the \fB\-\-emit\-relocs\fR (or \fB\-q\fR) option. This can be specified in the
\&\s-1GCC\s0 command by \fB\-Wl,\-q\fR.
.SH "Instrumentation and profiling"
.IX Header "Instrumentation and profiling"
Along with the instrumented file, \fBfdpr\fR creates the profile
file. The file is then filled with profile information
(i.e., counts at various points in the program), while the
instrumented program runs with its specified workload.
.PP
\&\fBNote\fR: The instrumented program requires a shared library
called \f(CW\*(C`libfdprinst32.so\*(C'\fR (or \f(CW\*(C`libfdprinst64.so\*(C'\fR for \s-1ELF64\s0
programs). A proper installation from the \s-1RPM\s0 file ensures the libraries are found.
Alternatively, make sure the environment variable \s-1LD_LIBRARY_PATH\s0
is set to the directory containing these libraries.
.PP
The instrumented program expects the profile file
to be in the same directory as the instrumented program.
To override this,
set the environment variable \fB\s-1FDPR_PROF_DIR\s0\fR to the required directory. 
Having the profile file specified with its full pathname, either by the 
\&\fB\-f\fR\fIprofile_file\fR or via \fB\s-1FDPR_PROF_DIR\s0\fR, is important if the program changes
its directory during runtime or if it is executed from a different directory then
the one where it was built.
.SH "Optimizations"
.IX Header "Optimizations"
By default, \fBfdpr\fR performs code
reordering optimization together with the optimizations of
branch prediction, branch folding, code alignment,
and removal of redundant \s-1NOOP\s0 instructions (see the \fBfdprpro\fR option \fB\-O\fR below) .
.PP
Additional optimizations are available explicitly by indicating specific \fBfdprpro\fR options (see below).
.SH "Examples"
.IX Header "Examples"
The following are typical usage examples of \fBfdpr\fR.
.IP "1." 4
In this simple example, \fBfdpr\fR performs all three
phases. Here, \f(CW\*(C`myprog\*(C'\fR is the input executable and
\&\f(CW\*(C`test\*(C'\fR is a shell script that invokes \f(CW\*(C`myprog\*(C'\fR.
.Sp
.Vb 1
\&        $ fdpr --instr --train test --opt myprog
.Ve
.Sp
The \f(CW\*(C`test\*(C'\fR script should look something like this:
.Sp
.Vb 2
\&        # code to exercise myprog
\&        $1 arg1 arg2 ...
.Ve
.Sp
\&\fBfdpr\fR generates the instrumentation in \f(CW\*(C`myprog.instr\*(C'\fR, runs the
script \f(CW\*(C`test\*(C'\fR, performs the default optimizations,
and generates the output file in \f(CW\*(C`myprog.fdpr\*(C'\fR.
.IP "2." 4
Perform specific optimizations, producing the output in \f(CW\*(C`myprog.lro\*(C'\fR
.Sp
.Vb 1
\&        $ fdpr -opt --link-register-optimization -RC -o myprog.lro myprog
.Ve
.Sp
This command performs only link-register optimization and code
reordering using the profile information in \f(CW\*(C`myprog.nprof\*(C'\fR
.SH "\fBfdprpro\fP options"
.IX Header "fdprpro options"
\&\fBfdprpro\fR accepts a host of optimization-specific options. In
addition, there are several options that create auxiliary files for
debugging purposes (e.g., code disassembly).
.IP "\fBAnalysis Options:\fR" 5
.IX Item "Analysis Options:"
.PD 0
.IP "\fB\-[no]aawc\fR, \fB\-\-[no]analyze\-assembly\-written\-csects\fR" 5
.IX Item "-[no]aawc, --[no]analyze-assembly-written-csects"
.PD
Analyze objects written in Assembly.
.IP "\fB\-acf\fR \fIanalysis-configuration-file\fR, \fB\-\-analysis\-configuration\-file\fR \fIanalysis-configuration-file\fR" 5
.IX Item "-acf analysis-configuration-file, --analysis-configuration-file analysis-configuration-file"
Provide a configuration file of analysis information (advanced option).
.IP "\fB\-asd\fR, \fB\-\-analyze\-static\-data\fR" 5
.IX Item "-asd, --analyze-static-data"
Analyze static data objects as distinct data elements for data reordering (unsafe for certain compilers).
.IP "\fB\-esa\fR, \fB\-\-extra\-safe\-analysis\fR" 5
.IX Item "-esa, --extra-safe-analysis"
Limit analysis phase to compiler generated code.
.IP "\fB\-fca\fR, \fB\-\-funcsect\-analysis\fR" 5
.IX Item "-fca, --funcsect-analysis"
Apply special analysis for an input executable that was compiled with the \fB\-qfuncsect\fR compiler option.
.IP "\fB\-ff\fR \fIstring\fR, \fB\-\-file\-format\fR \fIstring\fR" 5
.IX Item "-ff string, --file-format string"
Input file format: can be \s-1LM\s0 (load module) or \s-1PO\s0 (program object).
.IP "\fB\-ifl\fR \fIfile\fR, \fB\-\-ignored\-function\-list\fR \fIfile\fR" 5
.IX Item "-ifl file, --ignored-function-list file"
Set the ignored function list. The file contains names of functions that considered as unsafe and thus are not modified.
.IP "\fB\-iinf\fR, \fB\-\-ignore\-info\fR" 5
.IX Item "-iinf, --ignore-info"
Ignore .info sections produced with the \fB\-qfdpr\fR option during compile time.
.IP "\fBInstrumentation Options:\fR" 5
.IX Item "Instrumentation Options:"
.PD 0
.IP "\fB\-ei\fR, \fB\-\-embedded\-instrumentation\fR" 5
.IX Item "-ei, --embedded-instrumentation"
.PD
Perform embedded instrumentation. The profile will be collected into the application's global data area. When the application terminates, the collected data will be lost.
.IP "\fB\-fd\fR \fIFdesc\fR, \fB\-\-file\-descriptor\fR \fIFdesc\fR" 5
.IX Item "-fd Fdesc, --file-descriptor Fdesc"
Set the file descriptor number to be used when opening the profile file. The default of \fIFdesc\fR is set to the maximum-allowed number of open files.
.IP "\fB\-icvp\fR, \fB\-\-instr\-call\-value\-profiling\fR" 5
.IX Item "-icvp, --instr-call-value-profiling"
instrument the values of parameters passed in function calles.
.IP "\fB\-imullX\fR, \fB\-\-mullX\-instrumentation\fR" 5
.IX Item "-imullX, --mullX-instrumentation"
perform value profiling of \s-1RA\s0 and \s-1RB\s0 operands in mullX instructions.
.IP "\fB\-[no]iderat\fR, \fB\-\-[no]derat\-instrumentation\fR" 5
.IX Item "-[no]iderat, --[no]derat-instrumentation"
Perform value profiling of \s-1RA\s0 and \s-1RB\s0 operands in load/store indexed instructions.
.IP "\fB\-issu\fR, \fB\-\-instrumentation\-safe\-stack\-usage\fR" 5
.IX Item "-issu, --instrumentation-safe-stack-usage"
Ensure that additional stack space is properly allocated for the instrumented run. Use this option if your application uses the stack extensively (e.g., when the program uses \fIalloca()\fR). Note that this option adds extra overhead on instrumentation code.
.IP "\fB\-iso\fR \fIoffset\fR, \fB\-\-instrumentation\-stack\-offset\fR \fIoffset\fR" 5
.IX Item "-iso offset, --instrumentation-stack-offset offset"
Set the offset from the stack, a negative number, where the instrumentation's area for saving registers is kept at runtime. Use with care.
.IP "\fB\-M\fR \fIaddr\fR, \fB\-\-profile\-map\fR \fIaddr\fR" 5
.IX Item "-M addr, --profile-map addr"
Set the shared memory segment address for profiling. Alternative shared memory addresses are needed when the instrumented program application creates a conflict with the shared-memory addresses preserved for the profiling. Typical alternative values are 0x40000000, 0x50000000, ... up to 0xC0000000. The default is set to 0x3000000.
.IP "\fB\-ptm\fR, \fB\-\-profile\-to\-memory\fR" 5
.IX Item "-ptm, --profile-to-memory"
Use shared memory key instead of file mapping to obtain a shared memory area for the profile data.
.IP "\fB\-[no]ri\fR, \fB\-\-[no]register\-instrumentation\fR" 5
.IX Item "-[no]ri, --[no]register-instrumentation"
Instrument the input program file to collect profile information about indirect branches via registers. The default is set to collect the profile information.
.IP "\fB\-[no]sfp\fR, \fB\-\-[no]save\-floating\-point\-registers\fR" 5
.IX Item "-[no]sfp, --[no]save-floating-point-registers"
Save the floating point registers in the instrumented code. The default is set to save floating point registers.
.IP "\fB\-shmkey\fR \fIkey-number\fR, \fB\-\-shared\-memory\-key\fR \fIkey-number\fR" 5
.IX Item "-shmkey key-number, --shared-memory-key key-number"
Specify a shared memory key to use when creating a shared memory area for the profile. The default key is created by hashing the profile file name (with ftok).
.IP "\fBProfile Files Options:\fR" 5
.IX Item "Profile Files Options:"
.PD 0
.IP "\fB\-af\fR \fIprof_file\fR, \fB\-\-ascii\-profile\-file\fR \fIprof_file\fR" 5
.IX Item "-af prof_file, --ascii-profile-file prof_file"
.PD
Set the name of a text format profile file containing profile information.
.IP "\fB\-aop\fR, \fB\-\-accept\-old\-profile\fR" 5
.IX Item "-aop, --accept-old-profile"
Accept the old profile file collected on previous versions of the input program file (requires the \fB\-f\fR flag).
.IP "\fB\-f\fR \fIprof_file\fR, \fB\-\-profile\-file\fR \fIprof_file\fR" 5
.IX Item "-f prof_file, --profile-file prof_file"
Set the profile file name. The profile file is created during the instrumentation phase and read during the optimization phase. The profile file is updated each time you run the instrumented program.
.IP "\fB\-fdir\fR \fIprof_file_dir\fR, \fB\-\-profile\-file\-directory\fR \fIprof_file_dir\fR" 5
.IX Item "-fdir prof_file_dir, --profile-file-directory prof_file_dir"
Set the run-time location of the profile file. The profile will be search during the profiling phase at this location. The default location is the path given in the profile file name (\-f option). Applicable only at instrumentation phase.
.IP "\fBOptimization Options:\fR" 5
.IX Item "Optimization Options:"
.PD 0
.IP "\fB\-A\fR \fIalignment\fR, \fB\-\-align\-code\fR \fIalignment\fR" 5
.IX Item "-A alignment, --align-code alignment"
.PD
Specify code alignment strategy. 1: Use grouping rules of target machine (default), 2: Same as 1 but consider also hotness of branch targets. See \fB\-m\fR for the selected machine model.
.IP "\fB\-abb\fR \fIfactor\fR, \fB\-\-align\-basic\-blocks\fR \fIfactor\fR" 5
.IX Item "-abb factor, --align-basic-blocks factor"
Align basic blocks that are hotter than the average by a given (float) \fIfactor\fR. This is a lower-level machine-specific alignment compared to \fB\-\-align\-code\fR. Value of \fB\-1\fR (the default) disables this option.
.IP "\fB\-bf\fR, \fB\-\-branch\-folding\fR" 5
.IX Item "-bf, --branch-folding"
Eliminate branch to branch instructions.
.IP "\fB\-ccc\fR \fIthreshold\fR, \fB\-\-cold\-code\-connector\fR \fIthreshold\fR" 5
.IX Item "-ccc threshold, --cold-code-connector threshold"
Preserves original order for code which is less frequently executed than given threshold.
.IP "\fB\-bldcg\fR, \fB\-\-build\-dcg\fR" 5
.IX Item "-bldcg, --build-dcg"
Build a Data Connectivity Graph (\s-1DCG\s0) for enhanced data reordering (applicable only with the \fB\-RD\fR flag).
.IP "\fB\-bp\fR, \fB\-\-branch\-prediction\fR" 5
.IX Item "-bp, --branch-prediction"
Set branch prediction bit for conditional branches according to the collected profile.
.IP "\fB\-btcar\fR, \fB\-\-branch\-table\-csect\-anchor\-removal\fR" 5
.IX Item "-btcar, --branch-table-csect-anchor-removal"
Eliminate load instructions used when accessing branch tables.
.IP "\fB\-cbsi\fR, \fB\-\-chain\-based\-selective\-inline\fR" 5
.IX Item "-cbsi, --chain-based-selective-inline"
Perform selective inlining of functions that produce long hot chains of code.
.IP "\fB\-cbtd\fR, \fB\-\-convert\-bss\-to\-data\fR" 5
.IX Item "-cbtd, --convert-bss-to-data"
Convert \s-1BSS\s0 section into a data section. This is useful for more aggressive tocload and \s-1RD\s0 optimizations.
.IP "\fB\-cRD\fR, \fB\-\-conservativeRD\fR" 5
.IX Item "-cRD, --conservativeRD"
Perform conservative static data reordering by packing together all frequently referenced static variables.
.IP "\fB\-dce\fR, \fB\-\-dead\-code\-elimination\fR" 5
.IX Item "-dce, --dead-code-elimination"
Eliminate instructions related to unused local variables within frequently executed functions. This is useful mainly after applying function inlining optimization.
.IP "\fB\-dp\fR, \fB\-\-data\-prefetch\fR" 5
.IX Item "-dp, --data-prefetch"
Insert data-cache prefetch instructions to improve data-cache performance.
.IP "\fB\-dpht\fR \fIthreshold\fR, \fB\-\-data\-placement\-hotness\-threshold\fR \fIthreshold\fR" 5
.IX Item "-dpht threshold, --data-placement-hotness-threshold threshold"
Set data placement algorithm hotness threshold between (0,1), where 0 reorders the static variables in large groups based on the control flow, and 1 reorders the variables in very small groups based on their access frequency. (This is applicable only with the \fB\-RD\fR flag).
.IP "\fB\-dpnf\fR \fIfactor\fR, \fB\-\-data\-placement\-normalization\-factor\fR \fIfactor\fR" 5
.IX Item "-dpnf factor, --data-placement-normalization-factor factor"
Set data placement algorithm normalization factor between (0,1), where 0 causes static variables to be reordered regardless of their size, and 1 locates only small sized variables first. (applicable only with the \fB\-RD\fR flag).
.IP "\fB\-ece\fR, \fB\-\-epilog\-code\-eliminate\fR" 5
.IX Item "-ece, --epilog-code-eliminate"
Reduce code size by grouping common instructions in function epilogs, into a single unified code.
.IP "\fB\-fatc\fR \fInum_of_bytes\fR, \fB\-\-fat\-const\fR \fInum_of_bytes\fR" 5
.IX Item "-fatc num_of_bytes, --fat-const num_of_bytes"
Inflate constant areas in code section by adding \fInum_of_bytes\fR (entire set to 255) to each constant area.
.IP "\fB\-fatd\fR \fInum_of_bytes\fR, \fB\-\-fat\-data\fR \fInum_of_bytes\fR" 5
.IX Item "-fatd num_of_bytes, --fat-data num_of_bytes"
Inflate data section by adding \fInum_of_bytes\fR (entire set to 255) to each data basic unit.
.IP "\fB\-fatn\fR \fInum_of_nops\fR, \fB\-\-fat\-nop\fR \fInum_of_nops\fR" 5
.IX Item "-fatn num_of_nops, --fat-nop num_of_nops"
Inflate code secion by adding \fInum_of_nop\fR to each code basic block.
.IP "\fB\-bined\fR \fI\-binary_editor\fR, \fB\-\-binary\-editor\fR \fI\-binary_editor\fR" 5
.IX Item "-bined -binary_editor, --binary-editor -binary_editor"
Edit existing binary code (advanced option).
.IP "\fB\-fc\fR, \fB\-\-function\-cloning\fR" 5
.IX Item "-fc, --function-cloning"
Enable function cloning phase only during function inlining optimizations (applicable only with function inlining flags: \fB\-i\fR, \fB\-si\fR, \fB\-ihf\fR, \fB\-isf\fR, \fB\-shci\fR).
.IP "\fB\-hr\fR, \fB\-\-hco\-reschedule\fR" 5
.IX Item "-hr, --hco-reschedule"
Relocate instructions from frequently executed code to rarely executed code areas, when possible.
.IP "\fB\-hrf\fR \fIfactor\fR, \fB\-\-hco\-resched\-factor\fR \fIfactor\fR" 5
.IX Item "-hrf factor, --hco-resched-factor factor"
Set the aggressiveness of the \fB\-hr\fR optimization option according to a factor value between (0,1), where 0 is the least aggressive factor (applicable only with the \fB\-hr\fR option).
.IP "\fB\-tasr\fR, \fB\-\-toc\-anchor\-store\-reschedule\fR" 5
.IX Item "-tasr, --toc-anchor-store-reschedule"
Relocate \s-1TOC\s0 store instructions from frequently executed code to rarely executed code areas, when possible.
.IP "\fB\-i\fR, \fB\-\-inline\fR" 5
.IX Item "-i, --inline"
Same as \fB\-\-selective\-inline\fR with \fB\-\-inline\-small\-funcs\fR 12.
.IP "\fB\-ihf\fR \fIpct\fR, \fB\-\-inline\-hot\-functions\fR \fIpct\fR" 5
.IX Item "-ihf pct, --inline-hot-functions pct"
Inline all function call sites to functions that have a frequency count greater than the given \fIpct\fR frequency percentage.
.IP "\fB\-isf\fR \fIsize\fR, \fB\-\-inline\-small\-funcs\fR \fIsize\fR" 5
.IX Item "-isf size, --inline-small-funcs size"
Inline all functions that are smaller than or equal to the given \fIsize\fR in bytes.
.IP "\fB\-kr\fR, \fB\-\-killed\-registers\fR" 5
.IX Item "-kr, --killed-registers"
Eliminate stores and restores of registers that are killed (overwritten) after frequently executed function calls.
.IP "\fB\-lap\fR, \fB\-\-load\-address\-propagation\fR" 5
.IX Item "-lap, --load-address-propagation"
Eliminate load instructions of variable addresses by re-using pre-loaded addresses of adjacent variables.
.IP "\fB\-las\fR, \fB\-\-load\-after\-store\fR" 5
.IX Item "-las, --load-after-store"
Add \s-1NOP\s0 instructions to place each load instruction further apart following a store instruction that references the same memory address.
.IP "\fB\-plas\fR, \fB\-\-pattern\-based\-load\-after\-store\fR" 5
.IX Item "-plas, --pattern-based-load-after-store"
Optimizes inefficient memory access patterns in order to avoid load-after-store events. .
.IP "\fB\-ebplas\fR, \fB\-\-event\-based\-pattern\-based\-load\-after\-store\fR" 5
.IX Item "-ebplas, --event-based-pattern-based-load-after-store"
Optimizes inefficient memory access patterns in order to avoid load-after-store events. The optimization is possible if \s-1PM_MRK_LSU_REJECT_LHS\s0 profile is available.
.IP "\fB\-lro\fR, \fB\-\-link\-register\-optimization\fR" 5
.IX Item "-lro, --link-register-optimization"
Eliminate saves and restores of the link register in frequently-executed functions.
.IP "\fB\-lu\fR \fIaggressiveness_factor\fR, \fB\-\-loop\-unroll\fR \fIaggressiveness_factor\fR" 5
.IX Item "-lu aggressiveness_factor, --loop-unroll aggressiveness_factor"
Unroll short loops containing one to several basic blocks according to an aggressiveness factor between (1,9), where 1 is the least aggressive unrolling option for very hot and short loops.
.IP "\fB\-lun\fR \fIunrolling_number\fR, \fB\-\-loop\-unrolling\-number\fR \fIunrolling_number\fR" 5
.IX Item "-lun unrolling_number, --loop-unrolling-number unrolling_number"
Set the number of unrolled iterations in each unrolled loop. The allowed range is between (2,50). Default is set to 2. (Applicable only with the \fB\-lu\fR flag).
.IP "\fB\-lux\fR \fIunrolling_factor\fR, \fB\-\-loop\-unroll\-extended\fR \fIunrolling_factor\fR" 5
.IX Item "-lux unrolling_factor, --loop-unroll-extended unrolling_factor"
Unroll hot loops using given unrolling factor. The allowed values are integer numbers that are power of 2. Value \fB\-1\fR disables the optimization, value 1 calculates the unrolling factor automatically, given a machine model.
.IP "\fB\-nop\fR, \fB\-\-nop\-removal\fR" 5
.IX Item "-nop, --nop-removal"
Remove \s-1NOP\s0 instructions from reordered code.
.IP "\fB\-O\fR" 5
.IX Item "-O"
Switch on basic optimizations only. Same as \fB\-RC\fR \fB\-nop\fR \fB\-bp\fR \fB\-bf\fR.
.IP "\fB\-O2\fR" 5
.IX Item "-O2"
Switch on less aggressive optimization flags. Same as \fB\-O\fR \fB\-hr\fR \fB\-pto\fR \fB\-isf\fR 8 \fB\-tlo\fR \fB\-kr\fR \fB\-see\fR 0.
.IP "\fB\-O3\fR" 5
.IX Item "-O3"
Switch on aggressive optimization flags. Same as \fB\-O2\fR \fB\-RD\fR \fB\-isf\fR 12 \fB\-si\fR \fB\-lro\fR \fB\-las\fR \fB\-vro\fR \fB\-btcar\fR (for \s-1XCOFF\s0 files) \fB\-lu\fR 9 \fB\-rt\fR 0 \fB\-so\fR \fB\-see\fR 1 \fB\-oderat\fR.
.IP "\fB\-O4\fR" 5
.IX Item "-O4"
Switch on aggressive optimization flags together with aggressive function inlining. Same as \fB\-O3\fR \fB\-sidf\fR 50 \fB\-ihf\fR 20 \fB\-sdp\fR 9 \fB\-shci\fR 90 and \fB\-bldcg\fR (for \s-1XCOFF\s0 files).
.IP "\fB\-ocvp\fR, \fB\-\-opt\-call\-value\-profiling\fR" 5
.IX Item "-ocvp, --opt-call-value-profiling"
specialize function calls according to the values of their passed parameters.
.IP "\fB\-omullX\fR, \fB\-\-mullX\-optimization\fR" 5
.IX Item "-omullX, --mullX-optimization"
Optimize mullX instructions by adding a run-time check on \s-1RA\s0 and \s-1RB\s0 and performing equivalent operations with lower penalty. The optimization requires the use of \fB\-imullX\fR in the instrumentation phase.
.IP "\fB\-oderat\fR, \fB\-\-derat\-optimization\fR" 5
.IX Item "-oderat, --derat-optimization"
Optimize load/store indexed instructions by adding a run-time check on \s-1RA\s0 and \s-1RB\s0 and performing equivalent operations with lower penalty. The optimization requires the use of \fB\-iderat\fR in the instrumentation phase.
.IP "\fB\-pbsi\fR, \fB\-\-path\-based\-selective\-inline\fR" 5
.IX Item "-pbsi, --path-based-selective-inline"
Perform selective inlining of dominant hot function calls based on the control flow paths leading to hot functions.
.IP "\fB\-pc\fR, \fB\-\-preserve\-csects\fR" 5
.IX Item "-pc, --preserve-csects"
Preserve CSects' boundaries in reordered code.
.IP "\fB\-pca\fR, \fB\-\-propagate\-constant\-area\fR" 5
.IX Item "-pca, --propagate-constant-area"
Relocate the constant variables area to the top of the code section when possible.
.IP "\fB\-pfb\fR, \fB\-\-preserve\-first\-bb\fR" 5
.IX Item "-pfb, --preserve-first-bb"
Preserve original location of the entry point basic block in program.
.IP "\fB\-pp\fR, \fB\-\-preserve\-functions\fR" 5
.IX Item "-pp, --preserve-functions"
Preserve functions' boundaries in reordered code.
.IP "\fB\-[no]pr\fR, \fB\-\-[no]ptrgl\-r11\fR" 5
.IX Item "-[no]pr, --[no]ptrgl-r11"
Perform removal of R11 load instruction in _ptrgl csect.
.IP "\fB\-pto\fR, \fB\-\-ptrgl\-optimization\fR" 5
.IX Item "-pto, --ptrgl-optimization"
Perform optimization of indirect call instructions via registers by replacing them with conditional direct jumps.
.IP "\fB\-ptoht\fR \fIheatness_threshold\fR, \fB\-\-ptrgl\-optimization\-heatness\-threshold\fR \fIheatness_threshold\fR" 5
.IX Item "-ptoht heatness_threshold, --ptrgl-optimization-heatness-threshold heatness_threshold"
Set the frequency threshold for indirect calls that are to be optimized by \fB\-pto\fR optimization. Allowed range between 0 and 1. Default is set to 0.8. (Applicable only with \fB\-pto\fR flag).
.IP "\fB\-ptosl\fR \fIlimit_size\fR, \fB\-\-ptrgl\-optimization\-size\-limit\fR \fIlimit_size\fR" 5
.IX Item "-ptosl limit_size, --ptrgl-optimization-size-limit limit_size"
Set the limit of the number of conditional statements generated by \fB\-pto\fR optimization. Allowed values are between 1 and 100. Default value is set to 3. (Applicable only with the \fB\-pto\fR flag).
.IP "\fB\-RC\fR, \fB\-\-reorder\-code\fR" 5
.IX Item "-RC, --reorder-code"
Perform code reordering.
.IP "\fB\-rcaf\fR \fIaggressiveness_factor\fR, \fB\-\-reorder\-code\-aggressivenes\-factor\fR \fIaggressiveness_factor\fR" 5
.IX Item "-rcaf aggressiveness_factor, --reorder-code-aggressivenes-factor aggressiveness_factor"
Set the aggressiveness of code reordering optimization. Allowed values are [0 | 1 | 2], where 0 preserves then original code order and 2 is the most aggressive. Default is set to 1. (Applicable only with the \fB\-RC\fR flag).
.IP "\fB\-rccrf\fR \fIreversal_factor\fR, \fB\-\-reorder\-code\-condition\-reversal\-factor\fR \fIreversal_factor\fR" 5
.IX Item "-rccrf reversal_factor, --reorder-code-condition-reversal-factor reversal_factor"
Set the threshold fraction that determines when to enable condition reversal for each conditional branch during code reordering. Allowed input range is between 0.0 and 1.0 where 0.0 tries to preserve original condition direction and 1.0 ignores it. Default is set to 0.8 (Applicable only with the \fB\-RC\fR flag).
.IP "\fB\-rcctf\fR \fItermination_factor\fR, \fB\-\-reorder\-code\-chain\-termination\-factor\fR \fItermination_factor\fR" 5
.IX Item "-rcctf termination_factor, --reorder-code-chain-termination-factor termination_factor"
Set the threshold fraction that determines when to terminate each chain of basic blocks during code reordering. Allowed input range is between 0.0 and 1.0 where 0.0 generates long chains and 1.0 creates single basic block chains. Default is set to 0.05. (Applicable only with the \fB\-RC\fR flag).
.IP "\fB\-RD\fR, \fB\-\-reorder\-data\fR" 5
.IX Item "-RD, --reorder-data"
Perform static data reordering.
.IP "\fB\-ppcf\fR, \fB\-\-pp\-cross\-func\fR" 5
.IX Item "-ppcf, --pp-cross-func"
Perform cross function path profiling.
.IP "\fB\-ppme\fR, \fB\-\-pp\-max\-edges\fR" 5
.IX Item "-ppme, --pp-max-edges"
Perform edges number limitation.
.IP "\fB\-rmte\fR, \fB\-\-remove\-multiple\-toc\-entries\fR" 5
.IX Item "-rmte, --remove-multiple-toc-entries"
Remove multiple \s-1TOC\s0 entries pointing to the same location in the input program file.
.IP "\fB\-rt\fR \fIremoval_factor\fR, \fB\-\-reduce\-toc\fR \fIremoval_factor\fR" 5
.IX Item "-rt removal_factor, --reduce-toc removal_factor"
Perform removal of \s-1TOC\s0 entries according to a removal factor between (0,1), where 0 removes non-accessed \s-1TOC\s0 entries only and 1 removes all possible \s-1TOC\s0 entries.
.IP "\fB\-rtb\fR, \fB\-\-remove\-traceback\-tables\fR" 5
.IX Item "-rtb, --remove-traceback-tables"
Remove traceback tables in reordered code.
.IP "\fB\-rcs\fR, \fB\-\-remove\-csect\-symbols\fR" 5
.IX Item "-rcs, --remove-csect-symbols"
Remove csect symbols.
.IP "\fB\-sdp\fR \fIaggressiveness_factor\fR, \fB\-\-stride\-data\-prefetch\fR \fIaggressiveness_factor\fR" 5
.IX Item "-sdp aggressiveness_factor, --stride-data-prefetch aggressiveness_factor"
Perform data prefetching within frequently executed loops based on stride analysis, according to an aggressiveness factor between (1,9), where 1 is the least aggressive.
.IP "\fB\-sdpila\fR \fIinstructions_number\fR, \fB\-\-stride\-data\-prefetch\-instruction\-look\-ahead\fR \fIinstructions_number\fR" 5
.IX Item "-sdpila instructions_number, --stride-data-prefetch-instruction-look-ahead instructions_number"
Set the number of instructions for which data is prefetched into the cache ahead of time. Default value is platform dependant. (Applicable only with the \fB\-sdp\fR flag).
.IP "\fB\-sdpms\fR \fIstride_min_size\fR, \fB\-\-stride\-data\-prefetch\-min\-size\fR \fIstride_min_size\fR" 5
.IX Item "-sdpms stride_min_size, --stride-data-prefetch-min-size stride_min_size"
Set the minimal stride size in bytes, for which data will be considered a candidate for prefetching. Default value is set to 128 bytes. (Applicable only with the \fB\-sdp\fR flag).
.IP "\fB\-ebp\fR \fIevt_based_prefetch\fR, \fB\-\-event\-based\-prefetch\fR \fIevt_based_prefetch\fR" 5
.IX Item "-ebp evt_based_prefetch, --event-based-prefetch evt_based_prefetch"
Perform data prefetching based on the events file.
.IP "\fB\-ebpla\fR \fIinstructions_number\fR, \fB\-\-event\-based\-prefetch\-look\-ahead\fR \fIinstructions_number\fR" 5
.IX Item "-ebpla instructions_number, --event-based-prefetch-look-ahead instructions_number"
Set the number of instructions for which event based prefetch is performed. Default value is platform dependant. (Applicable only with the \fB\-ebp\fR flag).
.IP "\fB\-see\fR \fIlevel\fR" 5
.IX Item "-see level"
Use simplified prolog/epilog for functions that perform conditional early\-exit. Use basic optimization with \fIlevel\fR=0 and maximal with \fIlevel\fR=1.
.IP "\fB\-shci\fR \fIpct\fR, \fB\-\-selective\-hot\-code\-inline\fR \fIpct\fR" 5
.IX Item "-shci pct, --selective-hot-code-inline pct"
Perform selective inlining of functions in order to decrease the total number of execution counts, so that only functions with hotness above the given percentage are inlined.
.IP "\fB\-si\fR, \fB\-\-selective\-inline\fR" 5
.IX Item "-si, --selective-inline"
Perform selective inlining of dominant hot function calls.
.IP "\fB\-sidf\fR \fIpercentage_factor\fR, \fB\-\-selective\-inline\-dominant\-factor\fR \fIpercentage_factor\fR" 5
.IX Item "-sidf percentage_factor, --selective-inline-dominant-factor percentage_factor"
Set a dominant factor percentage for selective inline optimization. The allowed range is between 0 and 100. Default is set to 80. (Applicable only with the \fB\-si\fR and \fB\-pbsi\fR flags).
.IP "\fB\-siht\fR \fIfrequency_factor\fR, \fB\-\-selective\-inline\-hotness\-threshold\fR \fIfrequency_factor\fR" 5
.IX Item "-siht frequency_factor, --selective-inline-hotness-threshold frequency_factor"
Set a hotness threshold factor percentage for selective inline optimization to inline all dominant function calls that have a frequency count greater than the given frequency percentage. Default is set to 100. (Applicable only with the \fB\-si\fR \fB\-pbsi\fR flags).
.IP "\fB\-slbp\fR, \fB\-\-spinlock\-branch\-prediction\fR" 5
.IX Item "-slbp, --spinlock-branch-prediction"
Perform branch prediction bit setting for conditional branches in spinlock code containing l*arx and st*cx instructions. (Applicable after \fB\-bp\fR flag).
.IP "\fB\-sldp\fR, \fB\-\-spinlock\-data\-prefetch\fR" 5
.IX Item "-sldp, --spinlock-data-prefetch"
Perform data prefetching for memory access instructions preceding spinlock code containing l*arx and st*cx instructions.
.IP "\fB\-sll\fR \fILib1:Prof1,...,LibN:ProfN\fR, \fB\-\-static\-link\-libraries\fR \fILib1:Prof1,...,LibN:ProfN\fR" 5
.IX Item "-sll Lib1:Prof1,...,LibN:ProfN, --static-link-libraries Lib1:Prof1,...,LibN:ProfN"
Statically link hot code from specified dynamically linked libraries to the input program. The parameter consists of a comma-separated list of libraries and their profiles. \s-1IMPORTANT:\s0 Licensing rights of specified libraries should be observed when applying this copying optimization.
.IP "\fB\-sllht\fR \fIhotness_threshold\fR, \fB\-\-static\-link\-libraries\-hotness\-threshold\fR \fIhotness_threshold\fR" 5
.IX Item "-sllht hotness_threshold, --static-link-libraries-hotness-threshold hotness_threshold"
Set hotness threshold for the \fB\-\-static\-link\-libraries\fR optimization. The allowed input range is between 0 (least aggressive) and 1, or \fB\-1\fR, which does not require a profile and selects all code that might be called by the input program from the given libraries. Default is set at 0.5.
.IP "\fB\-so\fR, \fB\-\-stack\-optimization\fR" 5
.IX Item "-so, --stack-optimization"
Reduce the stack frame size of functions that are called with a small number of arguments.
.IP "\fB\-spc\fR, \fB\-\-shortcut\-plt\-calls\fR" 5
.IX Item "-spc, --shortcut-plt-calls"
Shortcut \s-1PLT\s0 calls in shared libraries to local functions if they exist. Note: Resolving to external symbols is disabled for such calls.
.IP "\fB\-stf\fR, \fB\-\-stack\-flattening\fR" 5
.IX Item "-stf, --stack-flattening"
Merge the stack frames of inlined functions with the frames of the calling functions.
.IP "\fB\-tb\fR, \fB\-\-preserve\-traceback\-tables\fR" 5
.IX Item "-tb, --preserve-traceback-tables"
Force the restructuring of traceback tables in reordered code. If \fB\-tb\fR option is omitted, traceback tables are automatically included only for \*(C+ applications that use the Try & Catch mechanism.
.IP "\fB\-tlo\fR, \fB\-\-tocload\-optimization\fR" 5
.IX Item "-tlo, --tocload-optimization"
Replace each load instruction that references the \s-1TOC\s0 with a corresponding add-immediate instruction via the \s-1TOC\s0 anchor register, where possible.
.IP "\fB\-ucde\fR, \fB\-\-unreachable\-code\-data\-elimination\fR" 5
.IX Item "-ucde, --unreachable-code-data-elimination"
Remove unreachable code and non-accessed static data.
.IP "\fB\-vro\fR, \fB\-\-volatile\-registers\-optimization\fR" 5
.IX Item "-vro, --volatile-registers-optimization"
Eliminate stores and restores of non-volatile registers in frequently executed functions by using available volatile registers.
.IP "\fB\-vrox\fR, \fB\-\-volatile\-registers\-extended\-optimization\fR" 5
.IX Item "-vrox, --volatile-registers-extended-optimization"
Eliminate stores and restores of non-volatile registers in frequently executed functions by using available volatile registers, the extended version supports \s-1FP\s0 registers and transparency.
.IP "\fB\-dlo\fR \fIlayout-file\fR, \fB\-\-data\-layout\-optimization\fR \fIlayout-file\fR" 5
.IX Item "-dlo layout-file, --data-layout-optimization layout-file"
\&.
.IP "\fBOutput Options:\fR" 5
.IX Item "Output Options:"
.PD 0
.IP "\fB\-cep\fR, \fB\-\-complement\-edge\-profile\fR" 5
.IX Item "-cep, --complement-edge-profile"
.PD
Complements partial profile information given for the basic blocks' frequencies by adding missing basic block-to-basic block edge counts.
.IP "\fB\-d\fR, \fB\-\-disassemble\-text\fR" 5
.IX Item "-d, --disassemble-text"
Print the disassembled text section of the output program into \fIoutput_file\fR.dis_text file.
.IP "\fB\-dap\fR, \fB\-\-dump\-ascii\-profile\fR" 5
.IX Item "-dap, --dump-ascii-profile"
Dump profile information in \s-1ASCII\s0 format into \fIprogram\fR.aprof (requires the \fB\-f\fR flag).
.IP "\fB\-db\fR, \fB\-\-disassemble\-bss\fR" 5
.IX Item "-db, --disassemble-bss"
Print the disassembled bss section of the output program into \fIoutput_file\fR.dis_bss file.
.IP "\fB\-dd\fR, \fB\-\-disassemble\-data\fR" 5
.IX Item "-dd, --disassemble-data"
Print the disassembled data section of the output program into \fIoutput_file\fR.dis_data file.
.IP "\fB\-diap\fR, \fB\-\-dump\-initial\-ascii\-profile\fR" 5
.IX Item "-diap, --dump-initial-ascii-profile"
Dump the given profile information in \s-1ASCII\s0 format into \fIprogram\fR.aprof.init (requires the \fB\-f\fR flag).
.IP "\fB\-dim\fR, \fB\-\-dump\-instruction\-mix\fR" 5
.IX Item "-dim, --dump-instruction-mix"
Dump instruction mix statistics based on gathered profile information.
.IP "\fB\-dm\fR, \fB\-\-dump\-mapper\fR" 5
.IX Item "-dm, --dump-mapper"
Print a map of basic blocks and static variables with their respective new \-> old addresses into a \fIprogram\fR.mapper file.
.IP "\fB\-o\fR \fIoutput_file\fR, \fB\-\-output\-file\fR \fIoutput_file\fR" 5
.IX Item "-o output_file, --output-file output_file"
Set the name of the output file. The default instrumented file is \fIprogram\fR.instr. The default optimized file is \fIprogram\fR.fdpr.
.IP "\fB\-pif\fR, \fB\-\-print\-inlined\-funcs\fR" 5
.IX Item "-pif, --print-inlined-funcs"
Print the list of inlined functions along with their corresponding calling functions into a \fIoutput_file\fR.inl_list file (requires the \fB\-si\fR or \fB\-i\fR or \fB\-isf\fR flags).
.IP "\fB\-pds\fR, \fB\-\-preserve\-debug\-symbols\fR" 5
.IX Item "-pds, --preserve-debug-symbols"
Preserve debug symbols.
.IP "\fB\-plc\fR, \fB\-\-preserve\-linkage\-conventions\fR" 5
.IX Item "-plc, --preserve-linkage-conventions"
Preserve linkage conventions.
.IP "\fB\-ppcf\fR, \fB\-\-print\-prof\-counts\-file\fR" 5
.IX Item "-ppcf, --print-prof-counts-file"
Print a text format of the profiling counters into a \fIprogram\fR.counts file (requires the \fB\-f\fR flag).
.IP "\fB\-sf\fR, \fB\-\-strip\-file\fR" 5
.IX Item "-sf, --strip-file"
Strip the output file.
.IP "\fB\-simo\fR, \fB\-\-single\-input\-multiple\-outputs\fR" 5
.IX Item "-simo, --single-input-multiple-outputs"
Optimize in parallel into multiple outputs as specified by option sets read from stdin.
.IP "\fBGeneral Options:\fR" 5
.IX Item "General Options:"
.PD 0
.IP "\fB\-h\fR, \fB\-\-help\fR" 5
.IX Item "-h, --help"
.PD
Print the online help.
.IP "\fB\-j\fR \fIjour_file\fR, \fB\-\-journal\fR \fIjour_file\fR" 5
.IX Item "-j jour_file, --journal jour_file"
Output optimization journal information to \fIjour_file\fR.
.IP "\fB\-m\fR \fImachine-model\fR, \fB\-\-machine\fR \fImachine-model\fR" 5
.IX Item "-m machine-model, --machine machine-model"
Generate code for the specified machine model. Target machine can be one of the following models: power2, power3, ppc405, ppc440, power4, ppc970, power5, power6, power7, ppe, spe, spe_edp, z10, z9. Default is power7.
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 5
.IX Item "-q, --quiet"
Set the output mode to quiet, suppressing informational messages.
.IP "\fB\-st\fR \fIstat_file\fR, \fB\-\-statistics\fR \fIstat_file\fR" 5
.IX Item "-st stat_file, --statistics stat_file"
Output statistics information to \fIstat_file\fR. If \fIstat_file\fR is '\-', the output goes to the standard output. See \fB\-\-verbose\fR for the default.
.IP "\fB\-v\fR \fIlevel\fR, \fB\-\-verbose\fR \fIlevel\fR" 5
.IX Item "-v level, --verbose level"
Set verbose output mode level. When set, various statistics about the output program are printed into the file \fIprogram\fR.stat. Allowed level range is between 0 and 3. Default is set to 0.
.IP "\fB\-V\fR, \fB\-\-version\fR" 5
.IX Item "-V, --version"
Print the version number.
.IP "\fB\-w\fR \fIlevel\fR, \fB\-\-warning\-level\fR \fIlevel\fR" 5
.IX Item "-w level, --warning-level level"
Set the warning level so only errors of this level and below will be printed. The levels are: 1: errors, 2: warnings, 3: debug warning, 4: debug information. Default is 2.
.SH "Default values of options"
.IX Header "Default values of options"
As shown in the previous section, determining the default value of options is done using the statistics file.
The options specified under 'options. ...' are the the user-specified option, plus the ones enabled by them.
So, in the above example, specifying \fB\-O3\fR entailed among others, the setup of \fB\-hco\fR option (Hot\-Cold Optimization),
and the setup of \fB\-hrf\fR option (\s-1HCO\s0 Rescheduling Factor) with the value of 0.1.
.SH "ASCII profile"
.IX Header "ASCII profile"
By default the profile generated by \fBfdprpro\fR is in some internal
binary format.  To allow external tools to generate the profile, an
\&\s-1ASCII\s0 profile is also supported (see \fB\-\-ascii\-profile\-file\fR).
.PP
The format of the \s-1ASCII\s0 profile file is:
.PP
.Vb 8
\& <Simple> address execCount </Simple>
\& <Cond> address execCount fallthruCount </Cond>
\& <Reg> address execCount fallthruCount regIndex 
\& type1 value1 execCount1
\& type2 value2 execCount2
\& ...
\& typeN valueN execCountN 
\& </Reg>
.Ve
.PP
The profile file is set of the Profile entries \- Simple, Cond and Reg.
The types in <Reg> entries are Abs \- for Absolute Values, Text \- for Text addresses, 
Data \- for Data addresses. There are no other \*(L"tags\*(R" defined, there must not be white spaces between the 
tags` letters, no comments. Addresses and Values can be in decimal or in hex form 
(starting with 0x).
.PP
For example \- 
.PP
.Vb 9
\& <Simple> 0x100000240 10 </Simple>
\& <Simple> 0x100000250 20 </Simple>
\& <Cond> 0x100000260 20  10 </Cond>
\& <Simple> 0x100000270 20 </Simple>
\& <Reg>  0x100000260 20  10 17
\& Abs 23 5
\& Text  0x100000300 5 
\& Data  0x200000400 10
\& </Reg>
.Ve
.PP
The order of the profile entries is not important, although for better
readability they should be sorted according to address.  The
\&\s-1ASCII\s0 profile file (extension .aprof) should contains entries for code executed at least
once. The code with execCount = 0 should not be included (it is not
forbidden but will not provide any information to fdpr).  Generally it
is sufficient to provide one profile entry for each executed basic block.
The address of that profile entry should be any address within the
basic block.  Since \fBfdprpro\fR's internal basic block partitioning is not
always known, several profile entries may be provided for a single
basic block up to the maximum of one profile entry for each
instruction.  When several profile entries are provided for a single
basic block and they contain conflicting information (e.g., different
execCount), \fBfdprpro\fR will produce a warning starting with \*(L"Conflicting
profiling\*(R" ... and ignore the later conflicting information.
.SH "Human-readable output"
.IX Header "Human-readable output"
In addition to the optimized or instrumented program, \fBfdprpro\fR produces human readable output.
.PP
1. Standard output. The text that goes to standard output includes the sign-on message, progress information and sign-off message.
The progress information displays the passage of \fBfdprpro\fR along the different phases of processing, as follows:
.PP
.Vb 10
\&        fdprpro (FDPR) <version> Linux/POWER
\&        fdprpro -a opt -O3 li.linux.gcc32.base
\&        > reading_exe ...
\&        > adjusting_exe ...
\&        > analyzing ...
\&        > building_program_infrastructure ...
\&  ...
\&        > updating_executable ...
\&        > writing_executable ...
\&        bye.
.Ve
.PP
If the \fB\-\-quiet\fR option is specified, no output is produced here.
.PP
2. Standard error. As usual, warnings and errors messages are written to the standard error file. Note that \fBfdprpro\fR exists after the
first error.
.PP
3. Statistics file. If the \fB\-\-verbose <level\fR> option is selected, various kinds of statistics about the program will
be written to the statistics file, \fIoutput_file\fR.stat. The file consists of a list of tables, typically
in a form of <attribute> <value> per line. The amount of information is determined by \fIlevel\fR. The following
is an example, corresponding to the above invocation:
.PP
.Vb 3
\&        options. group               active_options
\&        options. optimization        -bf -bp -dp -hr -hrf 0.10 -kr -las -lro -lu 9 -isf 12 -nop -pr -RC -RD -rt 0.00 -si -tlo -vro
\&        options. output              -o 1.base
.Ve
.PP
.Vb 2
\&        global.use_try_and_catch:              0
\&        global.profile_info:            not_available
.Ve
.PP
.Vb 3
\&        file.input:                     li.linux.gcc32.base
\&        file.output:                    1.base
\&        file.statistics:                1.base.stat
.Ve
.PP
.Vb 10
\&        analysis.csects:                     347
\&        analysis.functions:                  343
\&        analysis.constants:                   13
\&        analysis.basic_blocks:              5360
\&        analysis.function_descriptors:         0
\&        analysis.branch_tables:               10
\&        analysis.branch_table_entries:       374
\&        analysis.unknown_basic_units:         17
\&        analysis.traceback_tables:             0
\&  ...
.Ve
.PP
Note, the options specified in the optimization group are the actual ones enabled by the \fB\-O3\fR option. See below.
.SH "Importing code from shared libraries"
.IX Header "Importing code from shared libraries"
Typically \fBfdprpro\fR optimizes a single target module (an executable file or a shared
library), without considering the cross-module flow of the program. The
\&\fB\-\-static\-link\-libaries\fR option allows \fBfdprpro\fR to go beyond the boundary of
the target module and import hot code (i.e., heavily used) from other modules to which it is
dynamically linked. These modules are referred below as \fI\s-1SLL\s0 libraries\fR.
.PP
For example, to import hot code from \f(CW\*(C`mylib.so\*(C'\fR using its profile \f(CW\*(C`mylib.so.prof\*(C'\fR, to
\&\f(CW\*(C`myprog\*(C'\fR, use the following command:
.PP
.Vb 1
\& $ fdprpro -sll mylib.so:mylib.so.prof -O3 -o myprog.fdpr -f myprog.prof myprog
.Ve
.PP
For better performance results, it is highly recommended that users collect the profiles of the specified \s-1SLL\s0 libraries with
the same workload as the one used for training the target program.
.PP
\&\fB\s-1IMPORTANT\s0\fR: If an \s-1SLL\s0 library is later upgraded, the optimization must be rerun with the upgraded library to keep the
correspondence valid between that library and the target module.
.PP
\&\fB\s-1IMPORTANT\s0\fR: It is the responsibility of the user to ensure that code copying
from \s-1SLL\s0 libraries is compliant with the usage license of these libraries.
.SH "Limited-Value Profiling (LVP)"
.IX Header "Limited-Value Profiling (LVP)"
Starting with release 5.4.0.18 \fBfdprpro\fR provides special optimizations that
look for operations with specific values and replace them with an optimized
sequence. Such optimizations, which are typically target\-specific, require 
corresponding instrumentation that will profile the code to identify potential 
sequences. The first optimization that use \s-1LVP\s0 is the
\&\fB\-omullX\fR optimization. The optimization performs strength-reduction on
selected instances of integer multiplications. The user needs to specify \-imullX
for instrumentation and \fB\-omullX\fR for optimization. To tune the optimization
for Power6, specify also \fB\-m power6\fR.
.SH "Conservative vs. aggressive data reordering"
.IX Header "Conservative vs. aggressive data reordering"
The data reordering algorithm of \fBfdprpro\fR is enabled by the \fB\-RD\fR option and is 
available only for \s-1ELF64\s0 (64\-bit) programs. The algorithm reorders data elements 
in order to achieve better data cache efficiency as well
as more effective instruction selection. It may operate on all data elements or only on subset of them
depending on the selected aggressiveness. By default, a conservative
algorithm is selected which does not reorder user's static data (i.e., data
defined in .bss and .data sections). This is needed to protect against data
access optimizations used in \s-1GCC4\s0.3 and later. A more aggressive optimization is
possible with the option \fB\-\-analyze\-static\-data\fR (\fB\-asd\fR) which considers all
data elements.
.SH "Runtime instrumentation stack"
.IX Header "Runtime instrumentation stack"
\&\fBfdprpro\fR inserts certain code stubs during instrumentation which perform the
necessary counting. To keep program's state intact, the registers changed by
these stubs are save at the beginning of the stub and restored at the end. Writing below the stack
can cause segment violations in rare cases. This was found to occur in
applications that use the \f(CW\*(C`alloca()\*(C'\fR function or that employ
multi\-threading. To overcome this segment violation use the 
\&\fB\-\-instrumentation\-safe\-stack\-usage\fR (\fB\-issu\fR). The option adds code that prevents 
the signal at the cost of increased code size (up to 20%). The user can also set the offset of 
the save area from the stack pointer, which must be negative, using the 
\&\fB\-\-instrumentation\-stack\-offset\fR (\fB\-iso\fR).
.SH "Alignment strategies"
.IX Header "Alignment strategies"
The alignment flag \fB\-A\fR (\fB\-\-align\-code\fR) indicates the alignment strategy to use.
The strategy codes are:
.PP
1 \- An alignment strategy based on the instruction grouping of the selected target machine. See the \fB\-m\fR (\fB\-\-machine\fR) option for the possible machine models and the default value of this option.
.PP
2 \- An alignment stragegy based on instruction grouping as in (1) above, while considering also the hotness of the branch targets. This typically makes prefetching the target instruction stream more efficient.
.SH "Warnings and errors during profiling"
.IX Header "Warnings and errors during profiling"
In exceptional conditions during profiling (training) the instrumentation code produces 
warnings and error messages. The instrumentation messages are written to a special file name
\&\fIprofile file\fR.errors_\fIpid\fR_\fItid\fR to avoid having these messages interleaved with the regular text produced
by the user's program. The directory where both the profile file and profile error file
reside can be specified explicitly As with the profile file itself, the user may need to set the
absolute path of directory where the profile error file resides can be specified with the environment 
variable \fB\s-1FDPR_PROF_DIR\s0\fR (see \fBInstrumentation and Profiling\fR section above). If the directory where the program runs 
changes make sure \fB\s-1FDPR_PROF_DIR\s0\fR is defined with the full path name.
.SH "Files"
.IX Header "Files"
.IP "\fIinstalled_dir\fR/bin/fdpr" 4
.IX Item "installed_dir/bin/fdpr"
The wrapper script for \fBfdprpro\fR (by default \fIinstalled_dir\fR is \fB/opt/ibm/fdprpro\fR).
.IP "\fIinstalled_dir\fR/bin/fdprpro" 4
.IX Item "installed_dir/bin/fdprpro"
The actual executable (binary) program.
.IP "\fIinstalled_dir\fR/lib/libfdprinst32.so" 4
.IX Item "installed_dir/lib/libfdprinst32.so"
The shared library used during profiling for \s-1ELF32\s0 executable files.
.IP "\fIinstalled_dir\fR/lib/libfdprinst64.so" 4
.IX Item "installed_dir/lib/libfdprinst64.so"
The shared library used during profiling for \s-1ELF64\s0 executable files.
.IP "\fIoutput_file\fR.dis_text" 4
.IX Item "output_file.dis_text"
The disassembly file of program text, produced by the \fB\-\-disassemble\-text\fR option.
.IP "\fIoutput_file\fR.dis_data" 4
.IX Item "output_file.dis_data"
The disassembly file of program data, produced by the \fB\-\-disassemble\-data\fR option.
.IP "\fIoutput_file\fR.dis_bss" 4
.IX Item "output_file.dis_bss"
The disassembly file of program data, produced by the \fB\-\-disassemble\-bss\fR
option.
.IP "\fIoutput_file\fR.mapper" 4
.IX Item "output_file.mapper"
The map of basic block and static variables. See the \fB\-\-dump\-mapper\fR option.
.IP "\fIoutput_file\fR.aprof_init" 4
.IX Item "output_file.aprof_init"
The initial profile information in \s-1ASCII\s0 format. See the
\&\fB\-\-dump\-initial\-ascii\-profile\fR option.
.IP "\fIoutput_file\fR.aprof" 4
.IX Item "output_file.aprof"
The ASCII-formatted profile file. See the \fB\-\-dump\-ascii\-profile\fR option.
.IP "\fIoutput_file\fR.autoerr_log" 4
.IX Item "output_file.autoerr_log"
In case of error, the file contains information related to the
error. Please send it with the bug report to fdpr@il.ibm.com.
.IP "\fIoutput_file\fR.stat" 4
.IX Item "output_file.stat"
If \fB\-\-verbose <level\fR> is specified the file will contain certain statistics
about the target program or about the optimization process.
